/* groovylint-disable CompileStatic, SimpleDateFormatMissingLocale */
import java.text.SimpleDateFormat

REPOSITORY = 'peopleinspace'
ENV = 'prod'
def IMAGE_TAG

/* Scripted Pipeline allows for more code reuse and modularity, 
while Declarative Pipeline is designed to be more self-contained and less reliant on external scripts and libraries */

/* Declarative Pipeline */
pipeline {
    agent any
    stages {
        stage('First Build Configuration') {
            steps {
                script {
                    echo 'First Build Configuration started'
                    // Create app directory with logs and users.json if not exists on first time build
                    // ~ : /var/lib/jenkins

                    APP_DIR = "~/${REPOSITORY}-bot/app"
                    // create app directory if not exists
                    sh "mkdir -p ${APP_DIR}/logs/"

                    // create users.json if not exists
                    users_file = "${APP_DIR}/users.json"
                    sh "touch $users_file"
                    user_content = sh(script: "cat ${users_file}", returnStdout: true)
                    // if users.json is empty, add empty json object
                    sh '''
                    set +x
                    if [ -z  '$user_content' ]; then
                        echo "users.json is empty"
                        echo "{}" > $users_file
                    else
                        echo "users.json is not empty"     
                    fi
                    set -x
                    '''
                    echo 'First Build Configuration completed'
                }
            }
        }
        stage('Build') {
            steps {
                withCredentials([file(credentialsId: 'peopleinspace.envPROD', variable: 'ENV_FILE')]) {
                    sh('cat $ENV_FILE > .env')
                }
                script {
                    sh '''hostname
                    lsb_release -a
                    pwd
                    ls -a'''
                    def now = new Date()
                    sdf = new SimpleDateFormat('MMddyyHHmmss')
                    timestamp = sdf.format(now)
                    IMAGE_TAG = ENV + '-' + env.BUILD_ID
                    echo 'Build started'
                    echo 'Building the Docker image...'
                    sh "docker build -t $REPOSITORY:latest ."
                    sh "docker tag $REPOSITORY:latest $REPOSITORY:$IMAGE_TAG"
                    echo 'Build completed'
                }
            }
            post {
                success {
                    echo 'Build success'
                }
            }
        }
        stage('Stop and Remove Last Deploy') {
            steps {
                script {

                    echo 'Stop and Remove Last Deploy started'

                    // stop and remove subscription_handler container
                    sh 'docker stop peopleinspace_subscription_handler || true'
                    sh 'docker rm peopleinspace_subscription_handler || true'
                    
                    // stop and remove send_update container
                    sh 'docker stop peopleinspace_send_update || true'
                    sh 'docker rm peopleinspace_send_update || true'

                    // remove relevant images
                    def tags_to_delete = sh(script: "docker images --format {{.Repository}}:{{.Tag}} | grep $REPOSITORY:$ENV-", returnStdout: true)
                    keep_tag = REPOSITORY + ':' + IMAGE_TAG
                    tags_to_delete = tags_to_delete.replaceAll(keep_tag, '')
                    tags_to_delete = tags_to_delete.replaceAll('\n', ' ')
                    sh "docker rmi ${tags_to_delete} || true"

                    echo 'Stop and Remove Last Deploy completed'
                }
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploy started'
                echo 'Deploying the Docker image..'

                // subscription_handler //
                sh 'docker compose up -d subscription_handler'
                sh 'docker logs peopleinspace_subscription_handler'

                // send_update //
                sh 'docker compose create send_update'
                echo 'Deploy completed'
            }
        }
    }
}
